import React, { useState, useEffect } from "react";
import axios from 'axios'; // Add axios for API requests
import "jspdf-autotable";
import autoTable from 'jspdf-autotable'; // âœ… This is essential!
import jsPDF from 'jspdf';

const OccupancyData = () => {
  const [stations, setStations] = useState([]); // To store fetched stations
  const [stationId, setStationId] = useState(""); // To store selected station
  const [period, setPeriod] = useState("daily");
  const [selectedDate, setSelectedDate] = useState(""); // For selected date
  const [report, setReport] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(""); // added error handling

  const teal = "#009688"; // Same Teal

  useEffect(() => {
    // Fetch stations list on component mount
    const fetchStations = async () => {
      setLoading(true);
      try {
        const response = await axios.get('/api/stations/list'); // Fetch stations from an API endpoint
        if (response.data && response.data.station_ids) {
          // Assuming the response contains a list of station IDs
          const formattedStations = response.data.station_ids.map(station => ({
            id: station,        // Here we treat station names as ids
            name: station,      // Using station name as the label as well
          }));
          setStations(formattedStations);
          setStationId(formattedStations[0]?.id || ""); // Set default station ID if available
        }
      } catch (error) {
        setError('Failed to fetch station IDs.');
        console.error('Error fetching station IDs:', error);
      } finally {
        setLoading(false);
      }
    };

    // Set today's date as default for the date input
    const today = new Date();
    const formattedDate = today.toISOString().split('T')[0]; // Format as YYYY-MM-DD
    setSelectedDate(formattedDate);

    fetchStations();
  }, []);

  const fetchOccupancyReport = async () => {
    if (!selectedDate) {
      setError("Please select a date.");
      return;
    }

    setLoading(true);
    setError(""); // Reset error message before fetching the report

    try {
      const response = await fetch(
        `http://localhost:5000/api/occupancy-summary/${stationId}/${period}?date=${selectedDate}`
      );
      const data = await response.json();
      if (response.ok) {
        setReport(data);
      } else {
        setError(data.error || "Failed to fetch occupancy report.");
      }
    } catch (error) {
      console.error("Error fetching occupancy report:", error);
      setError("Error fetching occupancy report.");
    } finally {
      setLoading(false);
    }
  };
  const downloadPDF = () => {
    const doc = new jsPDF();
  
    const primaryTeal = "#00796B";
    const headTeal = "#009688";
    const rowLightTeal = "#E0F2F1";
    const rowAltTeal = "#B2DFDB";
  
    // Title
    doc.setFontSize(20);
    doc.setTextColor(primaryTeal);
    doc.text("Occupancy Report", 105, 20, null, null, "center");
  
    // Additional Info Block
    const now = new Date();
    const generatedOn = now.toLocaleString();
    const fileDate = now.toISOString().split("T")[0];
  
    const infoY = 30;
    const lineSpacing = 7;
  
    doc.setFontSize(11);
    doc.setTextColor("#004D40");
    doc.text(`Report Type      : ${report?.period.toUpperCase()}`, 14, infoY);
    doc.text(`Selected Date    : ${selectedDate}`, 14, infoY + lineSpacing);
    doc.text(`Station ID       : ${report?.station_id}`, 14, infoY + lineSpacing * 2);
    doc.text(`Generated On     : ${generatedOn}`, 14, infoY + lineSpacing * 3);
  
    doc.setDrawColor(180, 180, 180);
    doc.line(10, infoY + lineSpacing * 3 + 5, 200, infoY + lineSpacing * 3 + 5);
  
    const tableStartY = infoY + lineSpacing * 3 + 12;
  
    // Table Data
    const infoData = [
      ["Station ID", report.station_id],
      ["Period", report.period],
      ["Total Occupied Duration", report.total_occupied_duration],
      ["Unoccupied Duration", report.unoccupied_duration],
      ["Occupancy Rate", `${(report.occupancy_rate * 100).toFixed(2)}%`],
    ];
  
    autoTable(doc, {
      startY: tableStartY,
      head: [["Attribute", "Value"]],
      body: infoData,
      styles: {
        halign: 'left',
        fontSize: 11,
        textColor: "#004D40",
        cellPadding: 4,
      },
      headStyles: {
        fillColor: headTeal,
        textColor: "#FFFFFF",
        fontStyle: 'bold',
      },
      alternateRowStyles: {
        fillColor: rowAltTeal,
      },
      bodyStyles: {
        fillColor: rowLightTeal,
      },
      columnStyles: {
        0: { cellWidth: 70 },
        1: { cellWidth: 110 },
      },
    });
  
    // Footer
    doc.setFontSize(10);
    doc.setTextColor("#888");
    doc.text("Generated by WVtchWise System", 105, doc.internal.pageSize.height - 10, null, null, "center");
  
    doc.save(`occupancy_report_${fileDate}.pdf`);
  };
  
  
  
  
  return (
    <div style={{ padding: "20px" }}>
      <h2 style={{ color: teal, textAlign: "center", marginBottom: "30px" }}>
        Station Occupancy Report
      </h2>

      {/* Error message */}
      {error && (
        <div style={{
          backgroundColor: "#fff9c4",  // Soft yellow background
          color: "#f57f17",            // Dark orange text
          padding: "10px 20px",        // Smaller padding for compactness
          borderRadius: "8px",         // Slightly rounded corners
          textAlign: "center",
          fontSize: "14px",             // Smaller text size for a less prominent message
          fontWeight: "normal",        // Make the font weight normal (less bold)
          maxWidth: "400px",           // Reduced width to make it more compact
          margin: "0 auto",            // Center the error box horizontally
          marginBottom: "20px",        // Add some space below the error box
          boxShadow: "0px 2px 6px rgba(0, 0, 0, 0.1)", // Soft shadow to make it stand out
        }}>
          <strong>{"Reports not available"}</strong>
        </div>
      )}

      <div style={{ color: "teal", display: "flex", flexWrap: "wrap", gap: "20px", marginBottom: "20px" }}>
        {/* Station Selector */}
        <div style={{ flex: "1" }}>
          <label>Station:</label><br />
          <select
            value={stationId}
            onChange={(e) => setStationId(e.target.value)}
            style={{ width: "100%", padding: "8px" }}
          >
            {stations.length > 0 ? (
              stations.map((station) => (
                <option key={station.id} value={station.id}>
                  {station.name}
                </option>
              ))
            ) : (
              <option>Select a Station</option>
            )}
          </select>
        </div>

        {/* Period Selector */}
        <div style={{ flex: "1" }}>
          <label>Period:</label><br />
          <select
            value={period}
            onChange={(e) => setPeriod(e.target.value)}
            style={{ width: "100%", padding: "8px" }}
          >
            <option value="daily">Daily</option>
            <option value="weekly">Weekly</option>
            <option value="monthly">Monthly</option>
          </select>
        </div>

        {/* Date Picker */}
        <div style={{ flex: "1" }}>
          <label>Select Date:</label><br />
          <input
            type={period === "monthly" ? "month" : "date"}
            value={selectedDate}
            onChange={(e) => setSelectedDate(e.target.value)}
            style={{ width: "100%", padding: "8px" }}
          />
        </div>
      </div>

      {/* Fetch Button */}
      <div style={{ marginBottom: "30px" }}>
        <button
          onClick={fetchOccupancyReport}
          disabled={loading}
          style={{
            backgroundColor: teal,
            color: "white",
            width: "100%",
            padding: "12px",
            border: "none",
            fontSize: "16px",
            cursor: "pointer",
          }}
        >
          {loading ? "Loading..." : "Fetch Report"}
        </button>
      </div>

      {report && (
  <div>
    <div style={{
      border: `2px solid ${teal}`,
      borderRadius: "8px",
      padding: "20px",
      maxWidth: "600px",
      margin: "0 auto"
    }}>
      <h3 style={{ color: teal, textAlign: "center" }}>Report Summary</h3>
      <p><strong>Station ID:</strong> {report.station_id}</p>
      <p><strong>Period:</strong> {report.period}</p>
      <p><strong>Total Occupied Duration:</strong> {report.total_occupied_duration}</p>
      <p><strong>Unoccupied Duration:</strong> {report.unoccupied_duration}</p>
      <p><strong>Occupancy Rate:</strong> {(report.occupancy_rate * 100).toFixed(2)}%</p>
    </div>

    {/* PDF Download Button */}
    <div style={{ marginTop: "20px", maxWidth: "600px", marginLeft: "auto", marginRight: "auto" }}>
      <button
        onClick={downloadPDF}
        style={{
          backgroundColor: teal,
          color: "white",
          width: "100%",
          padding: "12px",
          border: "none",
          fontSize: "16px",
          cursor: "pointer",
          borderRadius: "6px",
        }}
      >
        Download PDF Report
      </button>
    </div>
  </div>
)}

    </div>
  );
};

export default OccupancyData;
